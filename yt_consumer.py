""" 
Developed By: Michael Pogue
Created:      2023.02.22
Last Updated: 2023.02.27

Note:
This code represents a two-part system, yt_producer.py and yt_consumer.py. 

Purpose:
The purpose for this segment is to receive the data generated by 
yt_producer.py, decode the message, analyze and alter the data (re-organize
the data as it comes in shorthand via 'K' to represent 1,000), then alert a
specified user via e-mail of games that are equal to or greater than the 
limit.
----------------------------------------------------------------------------"""

# Load necessary modules for code.
import pika
import sys
import time
import os
import ssl
import smtplib
from collections import deque
from time import strftime 
from dotenv import load_dotenv
from email.message import EmailMessage

# Set up environment. 
load_dotenv()
EMAIL_SENDER = os.getenv('EMAIL_SENDER')
EMAIL_SENDER_PASSWORD = os.getenv('EMAIL_SENDER_PASSWORD')
EMAIL_RECEIVER = os.getenv('EMAIL_RECEIVER')

# Set default variables.
host = 'localhost'
queue = 'yt_streamstatistics'
data_deque = deque(maxlen = 5)
data_warning = 60000

class ytReceive:
    """ Class to receive streamed data and alert user.
    ------------------------------------------------------------------------"""
    def decode_message(ch, method, properties, body):
        """ Method to decode streamed data, translate it, 
            and send warning if needed.
        --------------------------------------------------------------------"""     
        print(f"Received: {body.decode()} at {strftime('%H:%M:%S')}")
        data_deque.append(body.decode())
        initial_data = body.decode()
        initial_split = initial_data.split(",")
        data = initial_split[1][:-1]
        name = initial_split[0]

        # Code reads the decoded message and looks for key values such as 'K'
        # or '.'. If these values are present, the string is converted to an
        # int depending on the values that are read.
        # Period detection section.
        if ytReceive.character_detection(data, '.') == True:
            remove_period = data.replace('.', '')
            remove_letter = remove_period.replace('K','')
            data_final = int(remove_letter)*100

            # Period detected pass/fail section.
            if data_final >= data_warning:
                ytReceive.send_message(name, data_final)
            elif data_final < data_warning:
                pass

        # No period detected & K detected section.
        elif ytReceive.character_detection(data, '.') == False and ytReceive.character_detection(data, 'K') == True:
            remove_letter = data.replace('K','')
            data_final = int(remove_letter)*1000

        # No period detected & K detected pass/fail section.
            if data_final >= data_warning:
                ytReceive.send_message(name, data_final)
            elif data_final < data_warning:
                pass

        # No period or K detected section.
        elif ytReceive.character_detection(data, 'k') == False:
            pass

        ch.basic_ack(delivery_tag = method.delivery_tag)
        time.sleep(1)

    def send_message(name, data_final):
        """ Method to send email out should an alert be triggered.
        --------------------------------------------------------------------"""    
        # Set variable(s).
        em = EmailMessage()

        # Set subject and body of email.
        subject = f"Project YT-TREND Alert: {name} at {data_final}"
        body = f"""
        Automated Alert Message: 

        The game {name} has {data_final} views. 

        This automated alert message was triggered due to a view score higher than: {data_warning}.
        """

        # Create message format.
        em['From'] = EMAIL_SENDER
        em['To'] = EMAIL_RECEIVER
        em['Subject'] = subject
        em.set_content(body)

        # Open a line to SSL to provide a secure channel to send messages from.
        context = ssl.create_default_context()
        with smtplib.SMTP_SSL('smtp.gmail.com',465, context = context) as smtp:
            smtp.login(EMAIL_SENDER, EMAIL_SENDER_PASSWORD)
            smtp.sendmail(EMAIL_SENDER, EMAIL_RECEIVER, em.as_string())

    def character_detection(string, chars):
        """ Method to detect if a character is present in a string.
        --------------------------------------------------------------------"""    
        for char in string:
            if char in chars:
                return True
        return False

    def receive_message(hn: str, qn: str):
        """ Method to receive data from RabbitMQ site.
        --------------------------------------------------------------------"""  
        try:
            connection = pika.BlockingConnection(pika.ConnectionParameters(host = hn))
        except Exception as e:
            print("ERROR: connection to RabbitMQ server failed.")
            print(f"Verify the server is running on host={hn}.")
            print(f"The error says: {e}")
            sys.exit(1)
        try:
            channel = connection.channel()
            channel.queue_declare(queue = qn, durable = True)
            channel.basic_qos(prefetch_count=1) 
            channel.basic_consume( queue = qn, on_message_callback = ytReceive.decode_message)
            print("Ready for work. To exit press CTRL+C.")
            channel.start_consuming()
        except Exception as e:
            print("ERROR: Something went wrong.")
            print(f"The error says: {e}")
            sys.exit(1)
        except KeyboardInterrupt:
            print("\nUser interrupted continuous listening process.\n")
            sys.exit(0)
        finally:
            print("\nClosing connection. Goodbye.\n")
            connection.close()

def main():
    """ Main function to setup and launch individual components of code.
    ------------------------------------------------------------------------"""
    ytr = ytReceive
    ytr.receive_message(host, queue)

if __name__ == "__main__":
    """ Primary function to launch code.
    ------------------------------------------------------------------------"""
    main()